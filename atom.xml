<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YANG-meng-97</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yang-meng-97.github.io/"/>
  <updated>2020-06-15T09:10:56.853Z</updated>
  <id>https://yang-meng-97.github.io/</id>
  
  <author>
    <name>YANG-meng-97</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>百度智能小程序-开发兼容、文件、Web篇</title>
    <link href="https://yang-meng-97.github.io/2020/06/15/2020-06-15%E7%99%BE%E5%BA%A6%E6%99%BA%E8%83%BD%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%BC%80%E5%8F%91%E5%85%BC%E5%AE%B9%E3%80%81%E6%96%87%E4%BB%B6%E3%80%81Web%E7%AF%87/"/>
    <id>https://yang-meng-97.github.io/2020/06/15/2020-06-15%E7%99%BE%E5%BA%A6%E6%99%BA%E8%83%BD%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%BC%80%E5%8F%91%E5%85%BC%E5%AE%B9%E3%80%81%E6%96%87%E4%BB%B6%E3%80%81Web%E7%AF%87/</id>
    <published>2020-06-15T02:39:48.000Z</published>
    <updated>2020-06-15T09:10:56.853Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#jian-rong-xing-shuo-ming">兼容性说明</a></li><li><a href="#wen-jian-lei-xing">文件类型</a></li><li><a href="#web-tai-kai-fa">Web态开发</a></li></ul><!-- tocstop --></div><h2><span id="jian-rong-xing-shuo-ming">兼容性说明</span></h2><h4><span id="ban-ben-hao-bi-jiao">版本号比较</span></h4><ul><li><p>获取SDKVersion</p><p>swan.getSystemInfo或swan.getSystemInfoSync方法</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">swan.getSystemInfoSync()</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  &#123;</span></span><br><span class="line"><span class="comment">    brand: "iPhone",      // 手机品牌</span></span><br><span class="line"><span class="comment">    model: "iPhone 6",    // 手机型号</span></span><br><span class="line"><span class="comment">    pixelRatio: 2,        // 设备像素比</span></span><br><span class="line"><span class="comment">    language: "zh_CN",    // 宿主 App 设置的语言</span></span><br><span class="line"><span class="comment">    version: "6.5.23",    // 宿主 App 版本号    </span></span><br><span class="line"><span class="comment">    system: "iOS 9.3.4",  // 操作系统版本</span></span><br><span class="line"><span class="comment">    platform: "ios",      // 客户端平台</span></span><br><span class="line"><span class="comment">    SDKVersion: "1.7.0",  // 小程序基础库版本</span></span><br><span class="line"><span class="comment">    host: "1.7.0",        // 宿主平台 如：baiduboxapp</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><ul><li>代码比较</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compareVersion</span>(<span class="params">v1, v2</span>) </span>&#123;</span><br><span class="line">  v1 = v1.split(<span class="string">'.'</span>)</span><br><span class="line">  v2 = v2.split(<span class="string">'.'</span>)</span><br><span class="line">  <span class="keyword">var</span> len = <span class="built_in">Math</span>.max(v1.length, v2.length)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (v1.length &lt; len) &#123;</span><br><span class="line">    v1.push(<span class="string">'0'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (v2.length &lt; len) &#123;</span><br><span class="line">    v2.push(<span class="string">'0'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> num1 = <span class="built_in">parseInt</span>(v1[i])</span><br><span class="line">    <span class="keyword">var</span> num2 = <span class="built_in">parseInt</span>(v2[i])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (num1 &gt; num2) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num1 &lt; num2) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">compareVersion(<span class="string">'1.11.0'</span>, <span class="string">'1.9.9'</span>)</span><br><span class="line"><span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h4><span id="api-cun-zai-pan-duan">API存在判断</span></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (swan.createCanvasContext) &#123;</span><br><span class="line">  swan.createCanvasContext()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="comment">//这里是开发者自己的兼容逻辑，可以把相关功能入口隐藏掉</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="caniuse">canIUse</span></h4><ul><li>判断API的参数或返回值是否有新增</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">swan.showModal(&#123;</span><br><span class="line">  success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (swan.canIUse(<span class="string">'showModal.success.cancel'</span>)) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res.cancel)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>对旧版本进行降级处理</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    canIUse: swan.canIUse(<span class="string">'cover-view'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;video controls=<span class="string">"&#123;&#123;!canIUse&#125;&#125;"</span>&gt;</span><br><span class="line">  &lt;cover-view s-<span class="keyword">if</span>=<span class="string">"&#123;&#123;canIUse&#125;&#125;"</span>&gt;play&lt;<span class="regexp">/cover-view&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>video&gt;</span><br></pre></td></tr></table></figure><h4><span id="android-yu-ios-chai-yi">Android与iOS差异</span></h4><table><thead><tr><th>功能</th><th>Android</th><th>iOS</th></tr></thead><tbody><tr><td>webp 格式</td><td>支持</td><td>不支持</td></tr></tbody></table><p>webp格式：网页上有些图片点击图片另存为的储存格式。</p><h4><span id="ji-chu-ku-zui-di-ban-ben-she-zhi">基础库最低版本设置</span></h4><p><strong>1.设置基础库最低版本</strong></p><p>使用用户占比在85%以上的基础库版本号。</p><p>初次发布小程序包：</p><p>该基础库版本及基础库更高版本所对应的百度 APP 使用者，将可正常使用您的小程序；低版本使用者，则会收到升级百度 APP 的提示。</p><p>多次发布小程序包：</p><p>在选择最低基础库版本后，只对最新一次发布的小程序生效</p><ul><li>该基础库版本及基础库更高版本所对应的百度 APP 使用者，将可正常使用您最新发布的小程序；</li><li>低版本使用者，将继续使用旧版本小程序。<br>此时线上会存在并分发多个小程序版本。</li></ul><p><strong>2.查看基础库最低版本</strong></p><p><img src="/2020/06/15/2020-06-15%E7%99%BE%E5%BA%A6%E6%99%BA%E8%83%BD%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%BC%80%E5%8F%91%E5%85%BC%E5%AE%B9%E3%80%81%E6%96%87%E4%BB%B6%E3%80%81Web%E7%AF%87/version.jpg" alt="version"></p><h2><span id="wen-jian-lei-xing">文件类型</span></h2><h4><span id="dai-ma-bao-wen-jian">代码包文件</span></h4><p>swan.getFileSystemManager获取全局唯一的文件系统管理器；通过FileSystemManager来调用。</p><ul><li>“代码包文件” 是项目代码目录中的文件。</li><li>生命周期：<ul><li>下载小程序时被产生。</li><li>小程序被删除时，会被清除。</li></ul></li><li>读写权限：只可读，不可写入。</li><li>访问路径：从项目根目录开始写文件路径，不支持相对路径（即不支持 “./“ 或 “../“），不需要带访问协议前缀。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fileSystemManager = swan.getFileSystemManager();</span><br><span class="line"><span class="comment">// 路径：从项目根目录开始写文件路径，不支持相对路径，不需要带访问协议前缀。</span></span><br><span class="line"><span class="keyword">const</span> imageData = fileSystemManager.readFileSync(<span class="string">'loading/loading_barbg.png'</span>);</span><br></pre></td></tr></table></figure><h4><span id="ben-di-wen-jian">本地文件</span></h4><p><strong>1.本地临时文件</strong></p><ul><li>通过调用特定的接口临时产生的文件。这些特定的API会返回一个临时文件地址，该地址只能在当前小程序生命周期内使用，在小程序重启后，该临时地址和“本地临时文件”会被清除。</li><li>“本地临时文件”可以通过fs.saveFile()或fs.copyFile()来持久化成“本地用户文件”。</li><li>生命周期：<ul><li>通过调用特定的接口产生。</li><li>当退出当前小程序，或者后台运行小程序至5分钟后，或者杀死百度APP进程时，或者小程序被删除时，会被清除。</li></ul></li><li>读写权限：只可读，不可写入，也不可在“本地临时文件”所在目录中创建其他文件。</li><li>访问路径：由API自动生成。</li><li>存储空间限制：不限。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fileSystemManager = swan.getFileSystemManager();</span><br><span class="line">swan.downloadFile(&#123;</span><br><span class="line">    url: <span class="string">'https://smartprogram.baidu.com/docs/img/logo.png'</span>,</span><br><span class="line">    success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 此为 “本地临时文件” 路径。</span></span><br><span class="line">        resolve(res.tempFilePath);</span><br><span class="line">        <span class="comment">// 将 “本地临时文件” 持久化成 “本地用户文件”。</span></span><br><span class="line">        fileSystemManager.saveFileSync(res.tempFilePath, <span class="string">`<span class="subst">$&#123;swan.env.USER_DATA_PATH&#125;</span>/my.png`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>2.本地用户文件</strong></p><ul><li>生命周期：<ul><li>通过调用特定的接口产生或者清除。</li><li>小程序被删除时，会被清除。</li></ul></li><li>读写权限：可读可写，可创建文件，可建立目录。</li><li>访问路径：必须以内置变量 <code>swan.env.USER_DATA_PATH</code> 开头，如：<code>${swan.env.USER_DATA_PATH}/some/xxx.xxx</code>。不支持相对路径（即不支持 “./“ 或 “../“）。</li><li>存储空间限制：与 “本地缓存文件” 共计，一个用户的一个 appId，最多可存储 10MB 的 “本地用户文件”。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = swan.getFileSystemManager();</span><br><span class="line">fs.writeFileSync(<span class="string">`<span class="subst">$&#123;swan.env.USER_DATA_PATH&#125;</span>/some.txt`</span>, <span class="string">'hello'</span>, <span class="string">'utf8'</span>);</span><br><span class="line">fs.mkdirSync(<span class="string">`<span class="subst">$&#123;swan.env.USER_DATA_PATH&#125;</span>/my`</span>);</span><br></pre></td></tr></table></figure><p><strong>3.读写权限</strong></p><table><thead><tr><th>接口</th><th>是否可读</th><th>是否可写</th></tr></thead><tbody><tr><td>代码包文件</td><td>有</td><td>无</td></tr><tr><td>本地临时文件</td><td>有</td><td>无</td></tr><tr><td>本地缓存文件</td><td>有</td><td>无</td></tr><tr><td>本地用户文件</td><td>有</td><td>有</td></tr></tbody></table><h2><span id="web-tai-kai-fa">Web态开发</span></h2><p>Web 态是百度小程序包在后台自动转化得到的一个 H5 版本的小程序，其功能与展示形式与小程序一致。</p><h4><span id="web-tai-kai-fa">Web态开发</span></h4><p><strong>1.关于爬虫抓取</strong></p><p>生成的 Web 态页面会提供给搜索爬虫抓取，从而建立小程序页面索引。爬虫抓取的 UA 中包含 <code>swan-webapp</code>，爬虫的抓取方式不仅针对静态的 html 文本，页面中的动态数据渲染和样式布局等也会对爬虫识别有效信息起到至关重要的作用。</p><p><strong>2.Web态预览</strong></p><p><img src="/2020/06/15/2020-06-15%E7%99%BE%E5%BA%A6%E6%99%BA%E8%83%BD%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%BC%80%E5%8F%91%E5%85%BC%E5%AE%B9%E3%80%81%E6%96%87%E4%BB%B6%E3%80%81Web%E7%AF%87/yumingdizhi.jpg" alt="yumingdizhi"></p><ul><li>每个小程序都有唯一的子域名；</li><li>URL 中 path 和 query 部分和小程序页面中的 path 和 query 一致。比如：上例对应的小程序页面在百度 APP 中的打开路径即为 <code>/pages/detail/index?id=1</code>；</li><li>如 URL 为指定 path 和 query，默认跳转首页。</li><li>在工具中预览：登录状态下，点击“预览”按钮，弹出窗中切换到 “WEB 预览” Tab 可以预览 Web 态的效果。直接扫码通过手机浏览器查看。</li><li>浏览器预览：点击“在浏览器中打开”通过本地浏览器查看。<br>浏览器中打开的 URL 域名即是该小程序的 Web 态真实域名。预览环境的 URL 后有 appKey 参数，正式环境下没有该参数。</li></ul><h4><span id="web-tai-kai-fa-jian-yi">Web态开发建议</span></h4><p><strong>1.页面基础信息</strong></p><p>通过swan.setPageInfo()设置。在Web态环境中，页面基础信息会通过meta标签插入页面head中。</p><p>页面基础信息的设置与页面本身的内容相关。</p><p><strong>2.页面跳转</strong></p><ul><li>navigator组件</li><li>导航API：navigateTo、redirectTo、switchTab、navigateBack、reLaunch。</li></ul><p><strong>3.保证任何小程序页面都能独立访问</strong></p><p>小程序的任何一个页面都可能被作为入口访问，开发者应该保证任何页面都可以不依赖之前的页面数据，独立被访问。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// article.js 在文章页的实现片段：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">goToAuthorPage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 跳转到作者页</span></span><br><span class="line">    swan.navigateTo(<span class="string">`/page/author/author?id=<span class="subst">$&#123;authorID&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// author.js 在作者页的实现片段：</span></span><br><span class="line">Page(&#123;</span><br><span class="line">    onLoad(query) &#123;</span><br><span class="line">        <span class="comment">// 从页面路由参数中获取作者 id</span></span><br><span class="line">        <span class="keyword">const</span> authorID = query.id;</span><br><span class="line">        <span class="comment">// 根据作者 id 获取作者信息</span></span><br><span class="line">        <span class="keyword">const</span> authorInfo = requestAuthorInfo(authorID);</span><br><span class="line">        <span class="comment">// 用作者信息数据渲染页面</span></span><br><span class="line">        <span class="keyword">this</span>.setData(&#123;authorInfo&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>4.如何在运行时识别Web生态环境</strong></p><p>调用 <code>swan.getSystemInfo()</code>得到的系统信息中，<code>platform</code> 值为<code>&quot;web&quot;</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">getSystemInfo(e) &#123;</span><br><span class="line">    swan.getSystemInfo(&#123;</span><br><span class="line">        success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'res'</span>, res.platform); <span class="comment">// web</span></span><br><span class="line">        &#125;,</span><br><span class="line">        fail: <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5.在部分浏览器下，滚动页面时固定定位的元素抖动的解决方案</strong></p><p> 固定定位（<code>position</code> 属性为 <code>fixed</code>）的元素会存在跟随滚动抖动的问题。具体表现是在页面滚动时，fixed 定位元素从页面消失，滚动结束时 fixed 定位元素恢复到其被设置的位置。</p><ul><li>静态 Fixed 元素，即从初始状态就固定在页面某位置的元素。针对该元素，需要在元素上新增 class 属性值 <code>swan-web-fixed</code>，同时注意，fixed 的元素要保持 CSS 样式的独立性，不能与父容器有样式依赖关系。Web 态的运行时会根据该标识将对应的 DOM 提取到小程序页面容器之外，避免元素抖动。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template class&#x3D;&#39;web-container&#39;&gt;</span><br><span class="line">    &lt;view class&#x3D;&quot;page-wrapper&quot;&gt;</span><br><span class="line">        &lt;view class&#x3D;&quot;content&quot;&gt;&lt;&#x2F;view&gt; </span><br><span class="line">    &lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;header swan-web-fixed&quot;&gt;</span><br><span class="line">    &lt;view&gt;button 1&lt;&#x2F;view&gt;</span><br><span class="line">    &lt;view&gt;button 2&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.page-wrapper</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.page-wrapper</span> <span class="selector-class">.content</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.header</span>&#123;</span><br><span class="line">    <span class="comment">/* 注意：此处的 header 样式需要独立，不能和父容器有继承关系，且不要依赖父容器的继承样式 */</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>动态 Fixed 元素，即在初始状态时位于页面的文档正常流内，而在页面滚动过程中，动态修改 CSS 属性 <code>position</code> 的值为 <code>fixed</code> 的元素。针对这类元素，Web 态没有合适的兼容方式，业务方只能根据实际业务情况从产品或交互设计层面权衡是否规避此种样式。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#jian-rong-xing-shuo-ming&quot;&gt;兼容性说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#wen-jian-lei-xing&quot;&gt;文件类型&lt;/a&gt;&lt;/li&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>百度智能小程序-开发基础篇</title>
    <link href="https://yang-meng-97.github.io/2020/06/14/2020-06-14%E7%99%BE%E5%BA%A6%E6%99%BA%E8%83%BD%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>https://yang-meng-97.github.io/2020/06/14/2020-06-14%E7%99%BE%E5%BA%A6%E6%99%BA%E8%83%BD%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E7%AF%87/</id>
    <published>2020-06-14T08:13:37.000Z</published>
    <updated>2020-06-15T01:10:51.926Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#da-kai-xiao-cheng-xu">打开小程序</a></li><li><a href="#xiao-cheng-xu-dao-hang">小程序导航</a></li><li><a href="#shi-yong-dong-tai-ku">使用动态库</a></li></ul><!-- tocstop --></div><h2><span id="da-kai-xiao-cheng-xu">打开小程序</span></h2><p><strong>1.打开小程序原理</strong></p><p>URL Scheme</p><p>App内部注册协议后，当用户在浏览器或其他App内点击相应的scheme链接，就能够调起App并打开App内的相关页面。</p><p><img src="/2020/06/14/2020-06-14%E7%99%BE%E5%BA%A6%E6%99%BA%E8%83%BD%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E7%AF%87/openapp.jpg" alt="openapp"></p><ul><li><p>Scheme：</p><ul><li>baiduboxapp：scheme协议。使用百度App处理这个url，使用百度App打开小程序时，这部分保持不变；</li></ul></li><li><p>Source：</p><ul><li><p>swan：小程序标识。通知百度App调起小程序框架，保持不变；</p></li><li><p>appKey：想要打开的小程序appKey。</p></li><li><p>page：小程序打开的页面路径，页面路径可以在小程序代码app.json文件的pages属性中提取；</p></li><li><p>query：小程序页面路径参数。</p></li></ul></li></ul><p>调起机制：</p><img src="/2020/06/14/2020-06-14%E7%99%BE%E5%BA%A6%E6%99%BA%E8%83%BD%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E7%AF%87/openappmethod.jpg" alt="openappmethod" style="zoom:50%;"><p><strong>2.scheme生成工具</strong></p><p>开发者在商业投放、上线前验证等场景下可能需要获取小程序调起协议（scheme)，这时可以通过调起协议生成工具快速生成小程序scheme和二维码。</p><p><img src="/2020/06/14/2020-06-14%E7%99%BE%E5%BA%A6%E6%99%BA%E8%83%BD%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E7%AF%87/createscheme.jpg" alt="createscheme"></p><ul><li>App Key：小程序appKey；</li><li>启动页面：打开的小程序页面路径；</li><li>启动参数：小程序路径的参数；</li><li>进入场景：场景值。</li></ul><p><strong>3.调起功能开发</strong></p><ul><li><p>H5打开小程序：提供HS通用调起SDK-swanInvoke</p><p>引用：</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"https://b.bdstatic.com/searchbox/icms/searchbox/js/swanInvoke.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>​        调用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    document.getElementById(&#39;btn&#39;).addEventListener(&#39;click&#39;, function () &#123;</span><br><span class="line">        window.swanInvoke(&#123;</span><br><span class="line">            appKey: &#39;4fecoAqgCIUtzIyA4FAPgoyrc4oUc25c&#39;,</span><br><span class="line">            path: &#39;pages&#x2F;view&#x2F;view&#39;,</span><br><span class="line">            query: &#123;</span><br><span class="line">                id:1,</span><br><span class="line">                type: &#39;a&#39;</span><br><span class="line">            &#125;,</span><br><span class="line">            failUrl: &#39;https:&#x2F;&#x2F;www.baidu.com&#39; &#x2F;&#x2F; 调起失败跳转的页面</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><ul><li><p>小程序打开小程序：打开另一个小程序可以通过组件或API的方式</p><ul><li><p>组件：在小程序中使用组件打开另一个小程序，navigator中target=”miniProgram”；</p></li><li><p>API：在小程序中农使用API打开另一个小程序，swan.navigatorToSmartProgram；</p></li></ul></li><li><p>在web-view中打开小程序</p><ul><li>在小程序的web-view中打开另一个小程序，需要在引入jssdk后，调用swan.navigatorToSamrtProgram接口。</li></ul></li></ul><p>使用这三种能力开发调起功能，只需要配置必需的小程序参数，不需要开发者拼接scheme。</p><p><strong>如何判断H5页面是否在小程序web-view打开？</strong></p><p>H5 运行时，通过 window.navigator.userAgent 获取浏览器 userAgent。当 userAgent 字符串中包含小程序标识：‘swan/’时，则说明当前环境为小程序 web-view。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 在 H5 文件中</span><br><span class="line">   let UA &#x3D; window.navigator.userAgent;</span><br><span class="line">   var regex &#x3D; &#x2F;swan\&#x2F;&#x2F;;</span><br><span class="line">   console.log( regex.test(UA) );&#x2F;&#x2F; 若为true，则是在小程序的web-view中打开</span><br></pre></td></tr></table></figure><p><strong>4.小程序来源统计</strong></p><p>如果需要统计自行开发的小程序入口，或当开发者平台不能满足统计需求时，可以使用下面的方法，在小程序中手工打点统计。</p><ol><li>开发调起功能时，配置对应的调起参数。</li><li>在小程序 <a href="https://smartprogram.baidu.com/docs/develop/framework/app_service_register/" target="_blank" rel="noopener">App()</a> 生命周期函数的<code>onLaunch</code>和<code>onShow</code>中取得 Scheme 中小程序的相关参数。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">App(&#123;</span><br><span class="line">    onShow: function (options) &#123;</span><br><span class="line">        swan.requrest(&#123;</span><br><span class="line">            path: options.path, &#x2F;&#x2F; 小程序路径</span><br><span class="line">            query: options.query，&#x2F;&#x2F; 小程序传入的参数</span><br><span class="line">            scene: options.scene &#x2F;&#x2F; 场景值</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>两种调起能力的配置参数，与 onShow 中获取的参数名称不完全相同，参数对应关系如下表所示。</p><table><thead><tr><th>参数</th><th>H5 打开小程序配置参数名</th><th>小程序打开小程序配置参数名</th><th>onShow 中获取的参数名</th></tr></thead><tbody><tr><td>小程序 appKey</td><td>appKey</td><td>app-id</td><td>-</td></tr><tr><td>小程序页面路径</td><td>path</td><td>path</td><td>path</td></tr><tr><td>小程序路径的参数</td><td>query</td><td>extra-data</td><td>query</td></tr><tr><td>入口场景值</td><td>-</td><td>-</td><td>scene</td></tr></tbody></table><h2><span id="xiao-cheng-xu-dao-hang">小程序导航</span></h2><p><strong>1.页面跳转底层原理</strong></p><ul><li>navigateTo：客户端打开新的页面容器，并推入页面栈；</li><li>redirectTo：客户端打开新的页面容器，页面栈栈顶信息更新；</li><li>navigateBack：返回上一页面，页面栈栈顶弹出；</li><li>switchTab：点击tab；跳转某一tab页，页面栈栈顶信息更新；</li><li>reLaunch：页面栈清空，传入的url重新初始化为第一个页面。</li></ul><p><strong>2.原生小程序页面</strong></p><ul><li>首次打开的页面为非二级页面（app.json pages配置的首相页面或者tabBar页面），此页面不会有返回按钮和首页图标；通过跳转下一个新的页面（客户端新开的一个容器，且不为tabBar页面），则会在顶部导航栏左侧增加一个返回按钮；</li><li>首次打开的页面为二级页面（非app.json pages配置的首相页面或者非tabBar页面），此页面会出现首页图标；通过导航跳转下一个新的页面（客户端新开的一个容器，且不为tabBar页面），则会在首页图标左侧增加一个返回按钮；</li><li>跳转多次后，当返回上一个页面，客户端会将当前页面容器关掉，将待返回到的页面容器从后台切到前台展示，这一过程客户端顶部导航栏不会有刷新操作。</li></ul><p>可以在app.json或对应的page.json增加配置navigationStyle:custom，此时客户端就会隐藏掉原生顶部导航栏，开发者可以通过标签样式进行定制化导航栏。</p><p><strong>3.web-view组件撑起的h5页面</strong></p><p>在web-view组件承载h5页面中，如果想要跳转到一个新的小程序页面，需要配合jssdk进行操作。</p><p>需要从h5无缝转换到小程序，首先在小程序内放置一个web-view组件来链接之前的h5页面，一行代码完成了迁移到小程序的难题。</p><p>h5跳转到小程序页面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;webview 组件页面javascript</span><br><span class="line">navigate(url) &#123;</span><br><span class="line">    小程序.webView.navigateTo(&#123;url: &#39;..&#x2F;webview&#x2F;webview?weburl&#x3D;&#39; + url&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小程序另外一个新的webview组件页面中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; pages&#x2F;webview&#x2F;webview.js</span><br><span class="line">Page(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">    url:&#39;&#39;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#x2F;&#x2F; 监听页面加载,获取H5页面传递过来的weburl</span><br><span class="line">    onLoad: function (options) &#123;</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      url: options.weburl</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>并赋值给webview.小程序中的src属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; pages&#x2F;webview&#x2F;webview.小程序</span><br><span class="line">&lt;web-view src&#x3D;&quot;&#123;&#123;url&#125;&#125;&quot;&gt;&lt;&#x2F;web-view&gt;</span><br></pre></td></tr></table></figure><p>webview组件的返回</p><ul><li>如果当前是在使用 webview 组件的小程序页面，webview 组件首先回退展示的前一个 h5 内容，类似浏览器的网页返回。</li><li>如果 web-view 组件没有内容可以返回，就触发小程序页面栈的返回效果。</li><li>如果是当前小程序页面栈首页，再返回，会回到上一个小程序或者非小程序 NA 页面。</li></ul><p><strong>4.小程序间跳转</strong></p><p><img src="/2020/06/14/2020-06-14%E7%99%BE%E5%BA%A6%E6%99%BA%E8%83%BD%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E7%AF%87/navigateapp.jpg" alt="navigateapp"></p><p>getCurrentPages来判断当前页面栈的深度，从而决定是否应该展示[返回/回首页]</p><h2><span id="shi-yong-dong-tai-ku">使用动态库</span></h2><p><strong>1.动态库介绍</strong></p><p>动态库是指可被添加到小程序内直接使用的功能组件。开发者可直接在小程序内使用动态库，无需重复开发，为用户提供更丰富的服务。</p><ul><li><p>引入动态库代码包：</p><p>在app.json中声明需要使用的动态库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;dynamicLib&quot;: &#123;</span><br><span class="line">        &#x2F;&#x2F; 定义一个别名，小程序中用这个别名引用动态库。</span><br><span class="line">        &quot;myDynamicLib&quot;: &#123;</span><br><span class="line">            &#x2F;&#x2F; 这是动态库的 &#96;dynamicLibName&#96;，是全局唯一的名字，标志着被引用的动态库</span><br><span class="line">            &quot;provider&quot;: &quot;TheUniqueNameOwnedByThisDynamicLib&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用动态库</p></li></ul><p>自定义组件：</p><p>{<br>    “usingComponents”: {<br>        // 这里的 ‘myDynamicLib’ 就是上面定义的，本小程序使用此动态库的别名。<br>        // 这里的 ‘special-list’ 是此动态库的公开的自定义组件（publicComponents）的名称。<br>        // 动态库有哪些公开的自定义组件，应从各个动态库的用户文档中得到。<br>        // 这里的 ‘my-special-list’ 也是个自己定的别名，本页面或者本组件在模板中用此别名引用这个自定义组件。<br>        “my-special-list”: “dynamicLib://myDynamicLib/special-list”<br>    }<br>}</p><p>使用自定义组件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;view class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">    &lt;view&gt;下面这个自定义组件来自于动态库&lt;&#x2F;view&gt;</span><br><span class="line">    &lt;!-- 这里的 &#39;my-special-list&#39; 就是本页面中对于此自定义组件的别名 --&gt;</span><br><span class="line">    &lt;my-special-list &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure><ul><li>使用动态库的js接口</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 这里的 &#39;myDynamicLib&#39; 就是上面定义的，本小程序使用此动态库的别名。</span><br><span class="line">let lib &#x3D; requireDynamicLib(&#39;myDynamicLib&#39;);</span><br><span class="line">&#x2F;&#x2F; 这里调用动态库里定义的一个叫做 getData 的方法。</span><br><span class="line">&#x2F;&#x2F; 动态库有哪些公开的方法或属性可以被调用或访问，应从各个动态库的用户文档中得到。</span><br><span class="line">lib.getData();</span><br></pre></td></tr></table></figure><ul><li><p>动态库中页面可作为小程序的启动页面，也可以作为被跳转的页面</p><p>启动打开动态库页面的配置方式：</p><p><code>__dynamicLib__/{dynamicLibName}/{dynamicLibPath}</code></p><p>路由跳转的url格式：</p><p><code>dynamicLib://{dynamicLibName}/{dynamicLibPath}</code></p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取基础库版本号</span></span><br><span class="line"><span class="keyword">const</span> &#123;SDKVersion&#125; = swan.getSystemInfoSync();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过对比版本号，高于 3.180.3 时再调用，即将跳转的页面是动态库dynamicLibName中的pages/index/index页面</span></span><br><span class="line">swan.navigateTo(&#123;</span><br><span class="line">    url: <span class="string">'dynamicLib://dynamicLibName/pages/index/index'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>启动页面的<code>dynamicLibName</code>必须为线上动态库的名字，不能为别名；</li><li>路由跳转url中的<code>dynamicLibName</code>可以为线上动态库的名字，也可以是别名，优先当做别名处理；</li><li>使用的动态库需在小程序app.json中的<code>dynamicLib</code>字段中配置；</li><li>支持跳转到动态库页面的API为：swan.navigateTo、swan.reLaunch、swan.redirectTo、swan.navigateToSmartProgram。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#da-kai-xiao-cheng-xu&quot;&gt;打开小程序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#xiao-cheng-xu-dao-hang&quot;&gt;小程序导航&lt;/a&gt;&lt;/li
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>百度智能小程序-设计篇</title>
    <link href="https://yang-meng-97.github.io/2020/06/09/2020-06-09%E7%99%BE%E5%BA%A6%E6%99%BA%E8%83%BD%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%AE%BE%E8%AE%A1%E7%AF%87/"/>
    <id>https://yang-meng-97.github.io/2020/06/09/2020-06-09%E7%99%BE%E5%BA%A6%E6%99%BA%E8%83%BD%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%AE%BE%E8%AE%A1%E7%AF%87/</id>
    <published>2020-06-09T08:56:37.000Z</published>
    <updated>2020-06-15T09:14:39.472Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#ye-mian-bu-ju">页面布局</a></li><li><a href="#yue-du-pai-ban">阅读排版</a></li><li><a href="#nei-rong-xiang-qing-ye">内容详情页</a></li><li><a href="#logo-shu-chu">LOGO输出</a></li><li><a href="#cuo-ci">措辞</a></li><li><a href="#ding-bu-dao-hang-lan">顶部导航栏</a></li><li><a href="#di-bu-biao-qian-lan">底部标签栏</a></li><li><a href="#biao-qian-lan-lan-mu-xuan-xiang-tiao">标签栏（栏目选项条）</a></li><li><a href="#an-niu">按钮</a></li><li><a href="#xuan-ze">选择</a></li><li><a href="#lie-biao">列表</a></li><li><a href="#xiao-xi-ti-shi-kuang">消息提示框</a></li><li><a href="#mo-shi-dui-hua-kuang">模式对话框</a></li><li><a href="#di-bu-cao-zuo-cai-dan">底部操作菜单</a></li><li><a href="#yin-dao-guan-zhu">引导关注</a></li><li><a href="#kong-tai">空态</a></li><li><a href="#lottie-dong-hua">Lottie动画</a></li><li><a href="#afx-tou-ming-shi-pin">AFX透明视频</a></li></ul><!-- tocstop --></div><h2><span id="ye-mian-bu-ju">页面布局</span></h2><p><strong>1.基础布局</strong></p><p>基于宽度750px（iPhone6），需要为信息内容左右边距至少留出34px（17pt）。</p><p><strong>2.透明框架布局适配</strong></p><p>小程序顶部导航栏为透明，因此页面布局从屏幕顶部开始。页面内容应布局在安全区内。</p><p><img src="/2020/06/09/2020-06-09%E7%99%BE%E5%BA%A6%E6%99%BA%E8%83%BD%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%AE%BE%E8%AE%A1%E7%AF%87/safezone.jpg" alt="safezone"></p><p>小程序透明框架的安全区 = 屏幕 -（系统状态栏（1） + 框架控制功能区（2））。</p><p><em>向上滑时，系统状态栏加上背景颜色</em></p><p><strong>3.全面屏顶部导航栏适配</strong></p><p><img src="/2020/06/09/2020-06-09%E7%99%BE%E5%BA%A6%E6%99%BA%E8%83%BD%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%AE%BE%E8%AE%A1%E7%AF%87/safezonetwo.jpg" alt="safezonetwo"></p><p>左：全面屏iPhone 安全区 = 屏幕 -（系统状态栏（1） + 框架控制功能区（2）+ 底部指示区（3））<br>右：全面屏安卓手机 安全区 = 屏幕 -（系统状态栏（1） + 框架控制功能区（2））</p><p><em>默认情况下，底部指示区为透明，把底部指示区颜色适配为与底部栏一致。</em></p><h2><span id="yue-du-pai-ban">阅读排版</span></h2><p><strong>1.阅读视线流</strong></p><p>把主要的信息内容放在屏幕左上角。</p><p><strong>2.字体</strong></p><p>小程序默认字库 “STHeiti SC”,”Microsoft YaHei”,”Helvetica Neue”,”Helvetica,Arial,sans-seri,系统字体”</p><p><strong>3.字号</strong></p><p>一级标题 24pt(48px) 内容详情页面标题</p><p>二级标题 19pt(38px) 资讯类详情页正文</p><p>三级标题 18pt(36px) 列表标题</p><p>正文 17pt(34px) 长文类详情正文或详细介绍</p><p>正文 16pt(32px) 常见文字链</p><p>辅助文本 14pt(28px) 内容摘要，次级信息</p><p>辅助文本 13pt(26px) 列表辅助文字、按钮内文字</p><p>辅助文本 12pt(24px) 内容详情页附属信息</p><p><em>阅读文本使用17pt及以上，可点击文本按钮使用12pt及以上</em></p><p><strong>4.颜色</strong></p><p>主要信息#000000，次要信息#333333，辅助信息#999999，附属信息#CCCCCC。</p><p>蓝色：文字链接、提醒、完成#3C76FF-&gt;按下透明度降至20%；</p><p>红色：警告、出错#F7534F-&gt;按下透明度降至20%。</p><h2><span id="nei-rong-xiang-qing-ye">内容详情页</span></h2><p>图文详情页，动态详情页，视频详情页。</p><p><img src="/2020/06/09/2020-06-09%E7%99%BE%E5%BA%A6%E6%99%BA%E8%83%BD%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%AE%BE%E8%AE%A1%E7%AF%87/content.jpg" alt="content"></p><p><strong>1.基础布局</strong></p><ul><li>页面边距：信息内容离顶部、屏幕左右边距34px；</li><li>内容模块间距：标题与正文区间距60px，文字与多媒体间距40px；文字段落与段落间距72px。</li></ul><p><img src="/2020/06/09/2020-06-09%E7%99%BE%E5%BA%A6%E6%99%BA%E8%83%BD%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%AE%BE%E8%AE%A1%E7%AF%87/contentpadding.jpg" alt="contentpadding"></p><p><strong>2.分割线</strong></p><p>评论、相关推荐等，可以使用分割线区分。</p><ul><li>粗分割：用于区分不同类型的内容模块，如内容详情与相关推荐；</li><li>细分割：用于区分同级模板，如推荐列表。</li></ul><p><strong>3.图文详情页</strong></p><ul><li>标题：字号24pt，行高16px； </li><li>正文：字号19pt，字间距2，行高22px；</li><li>图片：宽度为760px，不拉伸小图片；</li><li>视频：宽度为760px，宽高比16:9。</li></ul><p><strong>4.动态详情页</strong></p><ul><li>正文：字号17pt，行高22px； </li><li>展开全文（可选）：字号17pt；</li><li>附属信息（可选）：字号12pt；</li><li>图片：<ul><li>一张图片：宽度为760px，不拉伸小图片；</li><li>多张图片：宽高比1：1，图片间间距8px；</li></ul></li><li>视频：宽度为760px，宽高比16:9。</li></ul><p><strong>5.视频详情页</strong></p><ul><li>视频播放器：配置视频封面；</li><li>标题：字号24pt，行高16px；</li><li>附属信息（可选）：字号12pt，行高12px。</li></ul><h2><span id="logo-shu-chu">LOGO输出</span></h2><p><strong>1.输出规格</strong></p><ul><li>PNG、BMP、JPEG、JPG</li><li>144x144px</li><li>&lt;=120kb</li></ul><p><strong>2.输出原则</strong></p><ul><li>保证不能被前端原型容器裁切。</li><li>元素占比&gt;=70%，&lt;=80%。</li><li>“图形+文字”，整体预留20%的出血区。</li></ul><h2><span id="cuo-ci">措辞</span></h2><p><strong>1.称谓</strong></p><p>大多数情况下用“你”。避免在同一内容中混用“你”和“我”。“我们猜你喜欢”、“我们即将为你播放下一段视频”。</p><p><strong>2.用词说明</strong></p><p>中文表达，避免行业专业用语、语句简洁。</p><p><strong>3.标点符号</strong></p><p>中文全角、疑问句？、感叹句！</p><h2><span id="ding-bu-dao-hang-lan">顶部导航栏</span></h2><p>始终固定在屏幕顶部，不随页面滚动隐藏。</p><p>1-&gt;容器、2-&gt;内部页面导航功能区、3-&gt;页面标题（可选）、4-&gt;框架控制功能区、5-&gt;系统状态栏（不属于导航栏）</p><p><img src="/2020/06/09/2020-06-09%E7%99%BE%E5%BA%A6%E6%99%BA%E8%83%BD%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%AE%BE%E8%AE%A1%E7%AF%87/toppart.jpg" alt="toppart"></p><ul><li><p>容器：默认背景白色</p></li><li><p>框架内部导航功能区：</p><ul><li>返回：用于返回上一页面；</li><li>回首页：用于返回小程序首页。</li></ul><p><img src="/2020/06/09/2020-06-09%E7%99%BE%E5%BA%A6%E6%99%BA%E8%83%BD%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%AE%BE%E8%AE%A1%E7%AF%87/topleftpart.jpg" alt="topleftpart"></p></li><li><p>页面标题</p><p>不超过9个中文字符，也可以将页面标题隐藏。</p></li><li><p>框架控制功能区</p><ul><li><p>菜单：呼出菜单面板，内含夜间模式、分享等；</p></li><li><p>关闭：关闭并退出当前小程序。</p><p><img src="/2020/06/09/2020-06-09%E7%99%BE%E5%BA%A6%E6%99%BA%E8%83%BD%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%AE%BE%E8%AE%A1%E7%AF%87/toprightpart.jpg" alt="toprightpart"></p></li></ul></li></ul><p><strong>1.自定义顶部导航栏</strong></p><p>getSystemInfoSync获取系统状态栏的高度（statusBarHeight），并为系统状态栏配置与自定义导航栏背景一致的颜色。系统状态栏即营业商、时间、电量板块。</p><p>自定义导航栏的元素与控制功能区对齐，且与原生顶部导航栏（navigationBarHeight）高度水平居中对齐。</p><p><strong>2.个性定制</strong></p><p><img src="/2020/06/09/2020-06-09%E7%99%BE%E5%BA%A6%E6%99%BA%E8%83%BD%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%AE%BE%E8%AE%A1%E7%AF%87/dingzhiblack.jpg" alt="dingzhi"></p><p>1-&gt;导航栏容器默认#FFFFFF（可配），系统状态栏跟随，2-&gt;导航栏元素及状态栏元素#000000。</p><p><img src="/2020/06/09/2020-06-09%E7%99%BE%E5%BA%A6%E6%99%BA%E8%83%BD%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%AE%BE%E8%AE%A1%E7%AF%87/dingzhiwhite.jpg" alt="dingzhiwhite"></p><p>1-&gt;导航栏容器#000000（可配），系统状态栏跟随，2-&gt;导航栏元素及状态栏元素#FFFFFF。</p><h2><span id="di-bu-biao-qian-lan">底部标签栏</span></h2><p>用于首页横向试图导航的切换，始终固定在屏幕底部，不随页面滚动隐藏。</p><p>1–&gt;容器，2-&gt;标签选项。</p><p><img src="/2020/06/09/2020-06-09%E7%99%BE%E5%BA%A6%E6%99%BA%E8%83%BD%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%AE%BE%E8%AE%A1%E7%AF%87/bottom.jpg" alt="bottom"></p><ul><li>容器：2-5个标签选项，默认为白色（可配）。</li><li>标签选项：包括非选中状态、点击态（小程序统一处理）、选中态<ul><li>图标：自行上传选项在选中和非选中的图标，.png，81*81px，&lt;=40kb；</li><li>选项名称：默认黑色，自定义，&lt;=5个字符。</li></ul></li></ul><p><strong>1.交互行为</strong></p><p>点击底部标签时，用户屏幕可以切换至与其关联内容；点击当前页面所在标签，则无反应。</p><p><strong>2.个性定制</strong></p><p><img src="/2020/06/09/2020-06-09%E7%99%BE%E5%BA%A6%E6%99%BA%E8%83%BD%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%AE%BE%E8%AE%A1%E7%AF%87/bottomstyle.jpg" alt="bottomstyle"></p><p>1-&gt;标签栏容器#FFFFFF（可配），2-&gt;标签名称-选中状态#000000（可配），3-&gt;标签名称-非选中态#999999（可配）</p><h2><span id="biao-qian-lan-lan-mu-xuan-xiang-tiao">标签栏（栏目选项条）</span></h2><p>可以放在页面顶部，也可以放在页面中间；</p><p>可以点击完成，也可以添加“swiper”组件，左右滑动完成。</p><p>1-&gt;容器、2-&gt;栏目选项。</p><p><img src="/2020/06/09/2020-06-09%E7%99%BE%E5%BA%A6%E6%99%BA%E8%83%BD%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%AE%BE%E8%AE%A1%E7%AF%87/secondtop.jpg" alt="secondtop"></p><ul><li>容器：2-5个选项，如果右侧有功能入口，可以自定义容器的整体宽度，但是功能入口&lt;=2个；</li><li>项目选项：包括非选中态、点击态（由小程序统一处理）、选中态（自带下划线）<ul><li>选项名称：&lt;=4个汉字</li><li>选中态下划线</li></ul></li></ul><p><strong>1.交互行为</strong></p><p>点击栏目选项时，模块视图可以切换至与其关联内容。点击当模块所在选项，则无反应。如需辅以左右滑动手势，需配合“swiper”组件实现。</p><p><strong>2.个性定制</strong></p><p><img src="/2020/06/09/2020-06-09%E7%99%BE%E5%BA%A6%E6%99%BA%E8%83%BD%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%AE%BE%E8%AE%A1%E7%AF%87/secondtopstyle.jpg" alt="secondtopstyle"></p><p>1-&gt;标签容器#FFFFFF（可配），2-&gt;标签名称-当前选中态#000000（可配），3-&gt;标签名称-非选中态#666666（可配）</p><h2><span id="an-niu">按钮</span></h2><p><strong>1.大按钮</strong></p><p>高度88px，圆角8px，文案&lt;=8个字符。</p><p>一个页面内，只能出现一个主操作按钮或警告操作按钮。</p><p><img src="/2020/06/09/2020-06-09%E7%99%BE%E5%BA%A6%E6%99%BA%E8%83%BD%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%AE%BE%E8%AE%A1%E7%AF%87/bigbottom.jpg" alt="bigbottom"></p><p><strong>2.小按钮</strong></p><p>高度56px，宽度&gt;=114px，圆角6px，内边距&gt;=30px。</p><p><img src="/2020/06/09/2020-06-09%E7%99%BE%E5%BA%A6%E6%99%BA%E8%83%BD%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%AE%BE%E8%AE%A1%E7%AF%87/smallbottom.jpg" alt="smallbottom"></p><p><strong>3.悬浮按钮</strong></p><p>高度88px，图标占整个按钮宽度的50%，&lt;=8个汉字。</p><p>与右侧和底部间距&gt;=34px。</p><p>不要重复放置框架上已有的功能，包括“返回”，“关闭”等；用于跳转与当前内容有关页面；禁止承载与当前页面无关的内容入口。</p><p>尽量减少阅读内容，比如上滑不显示，下滑渐显。</p><h2><span id="xuan-ze">选择</span></h2><p><strong>1.选项控件</strong></p><ul><li>单选：radio</li><li>多选：checkbox</li><li>开关：switch</li></ul><p><strong>2.滑块选择条</strong></p><p>slider</p><p><strong>3.浮层选择器</strong></p><p>picker</p><ul><li>选项列数及各列内容</li><li>用于时间选择场景时，可配置日期（年月日），时间（分秒）</li></ul><h2><span id="lie-biao">列表</span></h2><p><img src="/2020/06/09/2020-06-09%E7%99%BE%E5%BA%A6%E6%99%BA%E8%83%BD%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%AE%BE%E8%AE%A1%E7%AF%87/list.jpg" alt="list"></p><h2><span id="xiao-xi-ti-shi-kuang">消息提示框</span></h2><p>默认2s消失</p><p><strong>1.图文</strong></p><p><img src="/2020/06/09/2020-06-09%E7%99%BE%E5%BA%A6%E6%99%BA%E8%83%BD%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%AE%BE%E8%AE%A1%E7%AF%87/toast.jpg" alt="toast"></p><p>1-&gt;小程序统一提供，不可定制，开发者可以修改反馈图标，2-&gt;可不选，3-&gt;提示文案</p><ul><li>反馈图标：Success、Loading</li><li>提示文案：&lt;=7个字符</li></ul><p><strong>2.纯文</strong></p><p><img src="/2020/06/09/2020-06-09%E7%99%BE%E5%BA%A6%E6%99%BA%E8%83%BD%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%AE%BE%E8%AE%A1%E7%AF%87/toasttwo.jpg" alt="toasttwo"></p><p>1-&gt;小程序统一提供，不可定制，容器高度根据文案内容自适应，2-&gt;自定义</p><ul><li>提示文案：&lt;=14个汉字</li></ul><h2><span id="mo-shi-dui-hua-kuang">模式对话框</span></h2><p><img src="/2020/06/09/2020-06-09%E7%99%BE%E5%BA%A6%E6%99%BA%E8%83%BD%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%AE%BE%E8%AE%A1%E7%AF%87/showtoast.jpg" alt="showtoast"></p><p>1-&gt;容器，2-&gt;标题（可选，可配），3-&gt;内容（可配），4-&gt;操作按钮（1-2个，可配），5-&gt;蒙层。</p><ul><li>标题：&lt;=8个汉字；</li><li>内容：不必以句号结尾，不可使用”！“，&lt;=50汉字；</li><li>操作：默认双按钮，左“取消”，右“确定”，&lt;=4汉字；</li></ul><h2><span id="di-bu-cao-zuo-cai-dan">底部操作菜单</span></h2><p><img src="/2020/06/09/2020-06-09%E7%99%BE%E5%BA%A6%E6%99%BA%E8%83%BD%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%AE%BE%E8%AE%A1%E7%AF%87/showactionsheet.jpg" alt="showactionsheet"></p><p>1-&gt;容器，2-&gt;操作选项（可配），3-&gt;取消，4-&gt;蒙版</p><ul><li>操作选项：1-6个操作，&lt;=10个汉字，统一颜色；</li><li>取消、蒙版：自动收起面板且不执行任何操作。</li></ul><h2><span id="yin-dao-guan-zhu">引导关注</span></h2><p><strong>1.浮层引导</strong></p><p><img src="/2020/06/09/2020-06-09%E7%99%BE%E5%BA%A6%E6%99%BA%E8%83%BD%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%AE%BE%E8%AE%A1%E7%AF%87/showfavoriteguide.jpg" alt="showfavoriteguide"></p><ul><li>关闭按钮：点击后，浮层消失；</li><li>小程序头像：默认抓取小程序头像展现；</li><li>引导内容：一键关注小程序；</li><li>操作区：关注按钮，点击后直接执行关注小程序，浮层引导消失。</li></ul><p><strong>2.气泡引导</strong></p><p><img src="/2020/06/09/2020-06-09%E7%99%BE%E5%BA%A6%E6%99%BA%E8%83%BD%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%AE%BE%E8%AE%A1%E7%AF%87/showfavoriteguidetwo.jpg" alt="showfavoriteguidetwo"></p><p>无操作后，5秒后自动消失，暂不支持自定义。</p><h2><span id="kong-tai">空态</span></h2><p>指示页面无法显示内容时的情况，如网络错误、无内容数据等场景。</p><p><strong>1.格式</strong></p><p><img src="/2020/06/09/2020-06-09%E7%99%BE%E5%BA%A6%E6%99%BA%E8%83%BD%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%AE%BE%E8%AE%A1%E7%AF%87/valid.jpg" alt="valid"></p><p><strong>2.页面布局</strong></p><p>与页面空内容区域居中对齐。</p><h2><span id="lottie-dong-hua">Lottie动画</span></h2><p>animation-view-lottie</p><h2><span id="afx-tou-ming-shi-pin">AFX透明视频</span></h2><p>animation-video</p><p>After Effects（不要出现“混合模式”）-&gt;导入合成（&lt;=800x800px,&lt;=60FPS）-&gt;合成输出PNG序列帧-&gt;AFX Creator转化为MP4视频</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ye-mian-bu-ju&quot;&gt;页面布局&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#yue-du-pai-ban&quot;&gt;阅读排版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#n
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Github+Hexo搭建个人博客(2)</title>
    <link href="https://yang-meng-97.github.io/2020/06/09/2020-06-09Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2(2)/"/>
    <id>https://yang-meng-97.github.io/2020/06/09/2020-06-09Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2(2)/</id>
    <published>2020-06-09T06:45:50.000Z</published>
    <updated>2020-06-15T02:25:44.976Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#geng-huan-zhu-ti">更换主题</a></li><li><a href="#tian-jia-wen-zhang">添加文章</a></li></ul><!-- tocstop --></div><h2><span id="geng-huan-zhu-ti">更换主题</span><a href="#geng-huan-zhu-ti" class="header-anchor">#</a></h2><p>选择自己喜欢的主题，此处就以“icalm”主题为例。</p><p><img src="/2020/06/09/2020-06-09Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2(2)/favoritethemes.jpg" alt="favoritethemes"></p><p>点击进入，此时就进入到展示页面。点击Github进入网页著作者的Github（有些网页是点击About或Github图标进入）；进入仓库，搜索主题仓库。</p><p><img src="/2020/06/09/2020-06-09Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2(2)/repository.jpg" alt="repository"></p><p>点击对应主题博文，复制下载地址。</p><p><img src="/2020/06/09/2020-06-09Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2(2)/repositorytwo.jpg" alt="repositorytwo"></p><p>在站点名上长按Shift+右键，选择Git Bash here；或者win+R，输入cmd进入站点名的路径。输入以下命令，地址为刚才我们复制的下载地址，themes/hexo-theme-icalm是在本地文件夹中的名字</p><p><code>$ git clone https://github.com/nameoverflow/hexo-theme-icalm.git themes/hexo-theme-icalm</code></p><p>下载完成后就会在themes目录下生成一个hexo-theme-icalm文件。</p><p>更改站点下的_config.yml文件，找到theme，更改为：</p><p><code>theme: hexo-theme-icalm</code></p><p>注意不要更改其本身的结构，把其余不用的主题用<code>#</code>注释。</p><p>最后继续在站点路径下，输入以下代码：</p><p>#清空缓存</p><p><code>$ hexo clean</code></p><p>#重新生成database</p><p><code>$ hexo g</code></p><p>#打开本地仓库服务，在默认端口下<a href="http://localhost:4000/可以看到更换主题后的页面" target="_blank" rel="noopener">http://localhost:4000/可以看到更换主题后的页面</a></p><p><code>$ hexo s</code></p><p>#上传到远程仓库</p><p><code>$ hexo d</code></p><p>注意：上传到远程仓库后，更新需要一定时间，所以不着急</p><h2><span id="tian-jia-wen-zhang">添加文章</span><a href="#tian-jia-wen-zhang" class="header-anchor">#</a></h2><p><strong>1.创建文章</strong></p><p>在source/_post文件夹中，有默认的文章Hello World.md。</p><p>如果需要添加图片，先打开站点配置文件_config.yml，找到<code>post_asset_folder</code>选项，将其设置为true。在站点文件夹中打开Git Bash，输入以下命令： <code>$ npm install hexo-asset-image --save</code>安装插件。</p><p>在Git Bash，输入以下命令：<code>$ hexo new &quot;title&quot;</code>，就会在source/_post文件夹中生成一个.md类型的文本和一个同名文件夹。在编辑文章时，所需要的图片就放置在文件夹中，用相对路径添加图片。</p><p><strong>2.编写文章</strong></p><p>在此比较推荐<a href="https://www.typora.io/" target="_blank" rel="noopener">typora</a>编写md文件。不需要太多基础知识，就可以轻松实现；也可以点击typora页面的“帮助”-&gt;“Quick Start”，快速开始编写。</p><p>编写完文章后，输入以下代码：</p><p>#重新生成database</p><p><code>$ hexo g</code></p><p>#打开本地仓库服务，在默认端口下<a href="http://localhost:4000/可以看到新增文章" target="_blank" rel="noopener">http://localhost:4000/可以看到新增文章</a></p><p><code>$ hexo s</code></p><p>#上传到远程仓库</p><p><code>$ hexo d</code></p><p>注意：上传到远程仓库后，更新需要一定时间，所以不着急</p><p><strong>3.添加目录</strong></p><p>在<a href="https://hexo.io/plugins/" target="_blank" rel="noopener">hexo插件</a>中搜索目录插件hexo-toc。</p><p>再在站点目录下使用Git Bash进行安装，输入以下命令：</p><p><code>npm install hexo-toc --save</code></p><p>再在站点配置文件_config.yml中添加以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">toc:</span><br><span class="line">  maxdepth: 3</span><br><span class="line">  class: toc</span><br><span class="line">  slugify: transliteration</span><br><span class="line">  decodeEntities: false</span><br><span class="line">  anchor:</span><br><span class="line">    position: after</span><br><span class="line">    symbol: &#39;#&#39;</span><br><span class="line">    style: header-anchor</span><br></pre></td></tr></table></figure><ul><li>maxdepth：使用深度最大为maxdepth的标题。</li><li>class：toc的CSS类。（默认为false）</li><li>slugify：选择您要使用的辅助功能。目前支持uslug（默认）和音译。</li><li>decodeEntities：选择是否启用解码实体。（默认值为false，请参阅＃15）。</li><li>anchor：每个标题是否应具有锚点。（默认为false）<ul><li>position：锚应位于何处，before标题或after标题。（默认是after）;</li><li>symbol：您希望锚定为哪个符号。（默认是#）;</li><li>style：锚的CSS类，（默认为header-anchor）；</li></ul></li></ul><p>最后在你的文章需要添加目录的地方输入以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--toc--&gt;</span><br></pre></td></tr></table></figure><p>启用。</p><p><strong>自此，简单的个人博客就搭建好了。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#geng-huan-zhu-ti&quot;&gt;更换主题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#tian-jia-wen-zhang&quot;&gt;添加文章&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>在vsCode上安装Fecs</title>
    <link href="https://yang-meng-97.github.io/2020/06/09/2020-06-09%E5%9C%A8vsCode%E4%B8%8A%E5%AE%89%E8%A3%85Fecs/"/>
    <id>https://yang-meng-97.github.io/2020/06/09/2020-06-09%E5%9C%A8vsCode%E4%B8%8A%E5%AE%89%E8%A3%85Fecs/</id>
    <published>2020-06-09T02:16:53.000Z</published>
    <updated>2020-06-15T02:25:56.050Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#xia-zai-node-js">下载Node.js</a></li><li><a href="#xia-zai-vscode">下载vsCode</a></li><li><a href="#an-zhuang-shi-yong-fecs">安装使用Fecs</a></li></ul><!-- tocstop --></div><h2><span id="xia-zai-node-js">下载Node.js</span><a href="#xia-zai-node-js" class="header-anchor">#</a></h2><p><strong>1.下载Node.js</strong></p><p><a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noopener">Node.je官方下载地址</a></p><p>按照安装步骤一直按next，看可以更改安装路径，例如C:\node.js</p><p><strong>2.检测安装是否成功</strong></p><ul><li>按win+R键，输入cmd，回车</li></ul><p><img src="/2020/06/09/2020-06-09%E5%9C%A8vsCode%E4%B8%8A%E5%AE%89%E8%A3%85Fecs/cmd.jpg" alt="cmd"></p><ul><li>不管默认路径，输入<code>node -v</code>和<code>npm -v</code>，回车，会显示node,js和npm的版本，则安装成功</li></ul><p><img src="/2020/06/09/2020-06-09%E5%9C%A8vsCode%E4%B8%8A%E5%AE%89%E8%A3%85Fecs/version.jpg" alt="version"></p><p>新版的Node.js已自带npm，安装Node.js时会一起安装，npm的作用就是对Node.js依赖的包进行管理，也可以理解为用来安装/卸载Node.js需要装的东西。</p><p><strong>3.配置环境变量</strong></p><ul><li><p>在刚才Node.js的安装路径下C:\node.js，创建两个文件夹node_global和node_cache</p><p><img src="/2020/06/09/2020-06-09%E5%9C%A8vsCode%E4%B8%8A%E5%AE%89%E8%A3%85Fecs/check.jpg" alt="check"></p></li><li><p>在当前目录，长按Shift+鼠标右键，打开cmd命令行</p><p><img src="/2020/06/09/2020-06-09%E5%9C%A8vsCode%E4%B8%8A%E5%AE%89%E8%A3%85Fecs/opencmd.jpg" alt="opencmd"></p><p><img src="/2020/06/09/2020-06-09%E5%9C%A8vsCode%E4%B8%8A%E5%AE%89%E8%A3%85Fecs/open.jpg" alt="open"></p></li><li><p>输入以下命令，回车</p><p><code>npm config set prefix &quot;D:\nodejs\node_global&quot;</code><br><code>npm config set cache &quot;D:\nodejs\node_cache&quot;</code></p></li><li><p>点击“我的电脑”-&gt;右键-&gt;“属性”-&gt;“高级系统设置”-&gt;“高级”-&gt;“环境变量”</p><p>系统变量</p><p><img src="/2020/06/09/2020-06-09%E5%9C%A8vsCode%E4%B8%8A%E5%AE%89%E8%A3%85Fecs/opensystem.jpg" alt="opensystem"></p><p>添加以下代码</p><p><code>C:\node.js\</code></p><p><img src="/2020/06/09/2020-06-09%E5%9C%A8vsCode%E4%B8%8A%E5%AE%89%E8%A3%85Fecs/addsystem.jpg" alt="addsystem"></p><p>用户变量</p><p><img src="/2020/06/09/2020-06-09%E5%9C%A8vsCode%E4%B8%8A%E5%AE%89%E8%A3%85Fecs/openuser.jpg" alt="openuser"></p><p>添加以下代码</p><p><code>C:\node.js\node_global</code></p><p><img src="/2020/06/09/2020-06-09%E5%9C%A8vsCode%E4%B8%8A%E5%AE%89%E8%A3%85Fecs/adduser.jpg" alt="adduser"></p></li></ul><p>  则配置成功。</p><h2><span id="xia-zai-vscode">下载vsCode</span><a href="#xia-zai-vscode" class="header-anchor">#</a></h2><p><a href="https://code.visualstudio.com/Download" target="_blank" rel="noopener">vsCode官方下载地址</a></p><p>按照安装步骤一直按next，看可以更改安装路径，例如C:\vscode</p><h2><span id="an-zhuang-shi-yong-fecs">安装使用Fecs</span><a href="#an-zhuang-shi-yong-fecs" class="header-anchor">#</a></h2><p><strong>1.打开vsCode终端</strong></p><p>快捷键Ctrl+`    例如：这个点为Esc下面的那个键</p><p><strong>2.安装Fecs</strong></p><p>不用担心当前目录在哪儿，全局安装即可，直接输入：<code>npm install fecs -g</code></p><p><img src="/2020/06/09/2020-06-09%E5%9C%A8vsCode%E4%B8%8A%E5%AE%89%E8%A3%85Fecs/installfecs.jpg" alt="installfecs"></p><p>等待安装，安装好了。</p><p><strong>3.使用Fecs</strong></p><p>新建一个文件夹，来装载以后我们需要检测Fecs的代码，例如：Fecs-text；我们先写一个用来测试的index.html文件</p><p><img src="/2020/06/09/2020-06-09%E5%9C%A8vsCode%E4%B8%8A%E5%AE%89%E8%A3%85Fecs/indexhtml.jpg" alt="indexhtml"></p><p>可以发现这个文件的格式不太美观 ，空格太多。这是我们就需要Fecs来规范格式。</p><ul><li><p>打开终端，将终端的地址改为当前编写网页所在文件夹的位置</p><p>返回上一级地址使用<code>cd..</code></p><p>前进下一级地址使用<code>cd 文件夹名</code></p><p>更改磁盘到d盘使用d:</p><p><img src="/2020/06/09/2020-06-09%E5%9C%A8vsCode%E4%B8%8A%E5%AE%89%E8%A3%85Fecs/changeroute.jpg" alt="changeroute"></p><p>一定要保存需要进行Fecs规范的网页</p></li><li><p>输入以下命令：<code>fecs check</code></p><p>然后就会告诉我们哪里有问题。</p><p><img src="/2020/06/09/2020-06-09%E5%9C%A8vsCode%E4%B8%8A%E5%AE%89%E8%A3%85Fecs/fecscheck.jpg" alt="fecscheck"></p><p>如果有以下报错：</p><p><code>fecs : 无法加载文件 D:\Setup\Nodejs\node_global\fecs.ps1，因为在此系统上禁止运行脚本。</code></p><p>则输入以下代码：</p><p>#显示Restricted（表示状态是禁止的） 【受限制的、保密的】</p><p><code>get-ExecutionPolicy</code></p><p><code>set-ExecutionPolicy RemoteSigned</code></p><p>#显示RemoteSigned</p><p><code>get-ExecutionPolicy</code></p><p>再执行以上代码。</p></li><li><p>输入一下命令：<code>fecs format</code></p><p><img src="/2020/06/09/2020-06-09%E5%9C%A8vsCode%E4%B8%8A%E5%AE%89%E8%A3%85Fecs/fecsformat.jpg" alt="fecsformat"></p><p>就会自动在fecs-test下生成一个output文件夹，里面就会有一个正确规范index.html文件。</p></li></ul><p>  <strong>自此结束</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#xia-zai-node-js&quot;&gt;下载Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#xia-zai-vscode&quot;&gt;下载vsCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Github+Hexo搭建个人博客(1)</title>
    <link href="https://yang-meng-97.github.io/2020/06/06/2020-06-06Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2(1)/"/>
    <id>https://yang-meng-97.github.io/2020/06/06/2020-06-06Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2(1)/</id>
    <published>2020-06-06T10:00:01.000Z</published>
    <updated>2020-06-15T02:25:32.942Z</updated>
    
    <content type="html"><![CDATA[<div class="toc"><!-- toc --><ul><li><a href="#github-ban-kuai">Github板块</a></li><li><a href="#node-js-ban-kuai">Node.js板块</a></li><li><a href="#git-ban-kuai">git板块</a></li><li><a href="#hexo-ban-kuai">Hexo板块</a></li></ul><!-- tocstop --></div><p>新建一个文件夹，自行命名，用来装载我们自己的博客，例如：C:\blog</p><h2><span id="github-ban-kuai">Github板块</span><a href="#github-ban-kuai" class="header-anchor">#</a></h2><p><strong>1.新建一个Github账号</strong></p><p><a href="https://github.com/login" target="_blank" rel="noopener">Github官方网站注册页面</a></p><img src="/2020/06/06/2020-06-06Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2(1)/githubcreate.jpg"><p><strong>2.创建一个新仓库</strong></p><img src="/2020/06/06/2020-06-06Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2(1)/githubnewrespository.jpg"><img src="/2020/06/06/2020-06-06Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2(1)/githubrespositoryname.jpg"><h2><span id="node-js-ban-kuai">Node.js板块</span><a href="#node-js-ban-kuai" class="header-anchor">#</a></h2><p><a href="http://nodejs.cn/download/" target="_blank" rel="noopener">Node.js下载地址</a></p><h2><span id="git-ban-kuai">git板块</span><a href="#git-ban-kuai" class="header-anchor">#</a></h2><p><strong>1.下载安装git</strong></p><p><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">git下载地址</a>：一直next就可以，可以更改安装路径</p><p><strong>2.配置SSH-Key</strong></p><p>在我们自己新建的文件夹中，长按shift+鼠标右键，点击Git Bash Here打开Git Bash弹出窗口</p><img src="/2020/06/06/2020-06-06Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2(1)/gitbashhere.jpg"><img src="/2020/06/06/2020-06-06Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2(1)/gitbashherewindow.jpg"><p><strong>3.输入命令</strong></p><p>  <code>$ git config --global user.name &quot;Your Name&quot;</code><br>  <code>$ git config --global user.email &quot;email@example.com&quot;</code><br>  <code>$ ssh-keygen -t rsa -C email@example.com  // 生成ssh</code></p><p><em><code>Your Name</code>和<code>email@example.com</code>均为自己注册的git用户名和邮箱</em></p><p>注：每输入一条，按回车，后面全部直接回车，不填写东西</p><p>进入C:\Users\Administrator\.ssh会查看到里面有两个文件</p><p><img src="/2020/06/06/2020-06-06Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2(1)/checkid.jpg" alt="checkid"></p><p><strong>4.登录Github，进入之前新建的仓库</strong></p><img src="/2020/06/06/2020-06-06Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2(1)/shh.jpg"><p><strong>5.打开C:\Users\Administrator\.ssh的id_rsa_pub</strong></p><ul><li><p>复制文件中的内容粘贴到key中，title名为之前新建的文件夹</p></li><li><p>选中 allow write access</p></li><li><p>最后点击add key</p><img src="/2020/06/06/2020-06-06Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2(1)/shh-key.jpg"></li></ul><p><strong>6.测试是否成功</strong></p><p>在Git Bash中输入命令：<code>$ ssh -T git@github.com</code></p><p>出现</p><p>Hi whitescholars/whitescholars.github.io! You’ve successfully authenticated, but GitHub does not provide shell access.</p><p>证明校验成功。</p><h2><span id="hexo-ban-kuai">Hexo板块</span><a href="#hexo-ban-kuai" class="header-anchor">#</a></h2><p><strong>1.安装Hexo</strong></p><ul><li><p>win+R键，输入cmd，进入之前新建的C:\blog文件夹</p><p><img src="/2020/06/06/2020-06-06Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2(1)/cmd.jpg" alt="cmd"></p><p><img src="/2020/06/06/2020-06-06Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2(1)/changeroute.jpg" alt="changeroute"></p></li><li><p>输入以下命令：</p><p>#安装 hexo  -g全局安裝<br><code>$ npm install hexo-cli -g</code><br>#安装 hexo 部署到 git page 的 deployer<br><code>$ npm install hexo-deployer-git --save</code></p><p>#检测是否安装成功<br><code>$ hexo -v</code></p></li></ul><p><strong>2.Hexo初始化博客配置</strong></p><p>输入以下命令：</p><p>#初始化配置+博客名<br><code>$ hexo init 博客名</code></p><p>#进入博客名 文件夹<br><code>$ cd 博客名</code><br>#安装需要的相关依赖<br><code>$ npm install</code></p><p><strong>3.本地运行博客</strong></p><p>#cmd 进入博客根目录C:\blog\博客名</p><p>#默认 4000端口运行<br><code>$ hexo s</code></p><p>#自定义端口运行<br><code>$ hexo s -p 端口</code></p><p>此时就可以用浏览器访问：<a href="http://localhost:4000/，默认Hexo页面效果" target="_blank" rel="noopener">http://localhost:4000/，默认Hexo页面效果</a></p><p>在C:\blog\博客名\source_posts\hello-world.md中添加<code>## Hello Hexo</code> ，则可以实现修改内容，本地不用重新运行即可查看。</p><p><strong>4.配置文件</strong></p><p>修改配置：C:\blog\博客名_config.yml文件内容</p><p>找到以下内容，进行修改。注意：不要破坏原有结果，包括空格。</p><p>#博客作者<br><code>author: username</code></p><p>#url 博客地址<br><code>url: https://usename.github.io</code></p><p>#发布到哪个仓库的哪个分支<br><code>deploy:</code><br>  <code>type: git</code><br>  <code>repo: https://github.com/username/username.github.io.git</code><br>  <code>branch: master</code></p><p><em><code>username</code>为你在Github上的用户名</em></p><p><strong>5.发布到Github上</strong></p><p>win+R键，输入cmd，进入C:\blog\博客名</p><p>输入以下命令：</p><p>#先生成<br><code>$ hexo g</code><br>#再提交到github<br><code>$ hexo d</code></p><p>注意：需要关闭本地运行，Ctrl+C。</p><p>如果在<code>hexo d</code>提示ERROR Deployer not found: git，则先安装hexo-deployer-git，输入以下命令：</p><p><code>$ npm install hexo-deployer-git --save</code></p><p>再执行上述命令。</p><p>这样就可以通过<a href="https://username.github.io/进行博客访问了。" target="_blank" rel="noopener">https://username.github.io/进行博客访问了。</a></p><p><strong>自此个人博客的搭建结束，接下来就进行个性化设置。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;toc&quot;&gt;

&lt;!-- toc --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#github-ban-kuai&quot;&gt;Github板块&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#node-js-ban-kuai&quot;&gt;Node.js板块&lt;/a&gt;&lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
